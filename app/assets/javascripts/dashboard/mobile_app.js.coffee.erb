window.MobileApp = angular.module('BDFZer-Mobile', [
	'ionic', 
	'mobile.controllers', 
	'mobile.services',
	'UserServer',
	'FeedServer',
	'BDFZerServer'
])

window.MobileApp
	.run ['$ionicPlatform','UserInfo', ($ionicPlatform, UserInfo) ->
  		$ionicPlatform.ready () ->
    		StatusBar.styleDefault()
    		#window.CurrentUser = UserInfo.get()
    ]
	.config ['$stateProvider', '$urlRouterProvider',($stateProvider, $urlRouterProvider) ->

  ## Ionic uses AngularUI Router which uses the concept of states
  ## Learn more here: https://github.com/angular-ui/ui-router
  ## Set up the various states which the app can be in.
  ## Each state's controller can be found in controllers.js
		$stateProvider
		## setup an abstract state for the tabs directive
			.state 'tab', 
			  url: "/tab",
			  abstract: true,
			  templateUrl: "<%= asset_path 'tabs.html' %>"

			## Each tab has its own nav history stack:

			.state 'tab.dash',
			  url: '/dashboard',
			  views: 
			    'tab-dash': 
			      templateUrl: "<%= asset_path 'tab-dash.html' %>",
			      controller: 'DashCtrl'

			.state 'tab.friends', 
			  url: '/friends',
			  views: 
			    'tab-friends': 
			      templateUrl: "<%= asset_path 'tab-friends.html' %>",
			      controller: 'FriendsCtrl'

			.state 'tab.friend-detail', 
			  url: '/friend/:friendId',
			  views: 
			    'tab-friends': 
			      templateUrl: "<%= asset_path 'friend-detail.html' %>",
			      controller: 'FriendDetailCtrl'

			.state 'tab.account', 
			  url: '/account',
			  views: 
			    'tab-account': 
			      templateUrl: "<%= asset_path 'tab-account.html' %>",
			      controller: 'AccountCtrl'

		## if none of the above states are matched, use this as the fallback
		$urlRouterProvider.otherwise '/tab/dashboard'
		return
	]





window.MobileApp.config(["$httpProvider", (provider) ->
    provider.defaults.headers.common['X-CSRF-Token'] = $('meta[name=csrf-token]').attr('content')
    provider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'
])